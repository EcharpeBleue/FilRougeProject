-- Generated by Mocodo 4.2.4
drop database if exists GuildeDB;
create database GuildeDB;
use GuildeDB;
CREATE TABLE API_KEY (
  PRIMARY KEY (idApi),
  idApi         VARCHAR(42) NOT NULL,
  intitule      VARCHAR(42),
  idUtilisateur VARCHAR(42) NOT NULL,
  avecSesPersos VARCHAR(42)
);

CREATE TABLE RELATION_DEMANDER (
  PRIMARY KEY (idPersonnage, idEvenement),
  idPersonnage VARCHAR(42) NOT NULL,
  idEvenement  VARCHAR(42) NOT NULL
);

CREATE TABLE EVENEMENT (
  PRIMARY KEY (idEvenement),
  idEvenement   VARCHAR(42) NOT NULL,
  date          VARCHAR(42),
  idUtilisateur VARCHAR(42) NOT NULL,
  idZone        VARCHAR(42) NULL,
  idPrerequis   VARCHAR(42) NULL
);

CREATE TABLE MESSAGES (
  PRIMARY KEY (idMessages),
  idMessages VARCHAR(42) NOT NULL,
  envoyer    VARCHAR(42),
  intitule   VARCHAR(42)
);

CREATE TABLE PERSONNAGE (
  PRIMARY KEY (idPersonnage),
  idPersonnage VARCHAR(42) NOT NULL,
  niveau       VARCHAR(42),
  equipement   VARCHAR(42)
);

CREATE TABLE PREREQUIS (
  PRIMARY KEY (idPrerequis),
  idPrerequis VARCHAR(42) NOT NULL,
  equipement  VARCHAR(42),
  niveauMin   VARCHAR(42),
  niveauMax   VARCHAR(42)
);

CREATE TABLE RANG (
  PRIMARY KEY (idRang),
  idRang   VARCHAR(42) NOT NULL,
  intitule VARCHAR(42),
  rang     VARCHAR(42)
);

CREATE TABLE RELATION_SIGNALE (
  PRIMARY KEY (idUtilisateur, idSignalement),
  idUtilisateur VARCHAR(42) NOT NULL,
  idSignalement VARCHAR(42) NOT NULL
);

CREATE TABLE SIGNALEMENT (
  PRIMARY KEY (idSignalement),
  idSignalement     VARCHAR(42) NOT NULL,
  intitule          VARCHAR(42),
  date              VARCHAR(42),
  idTypeSignalement VARCHAR(42) NOT NULL,
  idUtilisateur     VARCHAR(42) NOT NULL
);

CREATE TABLE TYPE_EVENEMENT (
  PRIMARY KEY (idTypeEvenement),
  idTypeEvenement VARCHAR(42) NOT NULL,
  intitule        VARCHAR(42)
);

CREATE TABLE TYPE_SIGNALEMENT (
  PRIMARY KEY (idTypeSignalement),
  idTypeSignalement VARCHAR(42) NOT NULL,
  intitule          VARCHAR(42)
);

CREATE TABLE TYPE_ZONE (
  PRIMARY KEY (idTypeZone),
  idTypeZone VARCHAR(42) NOT NULL,
  intitule   VARCHAR(42)
);

CREATE TABLE UTILISATEUR (
  PRIMARY KEY (idUtilisateur),
  idUtilisateur VARCHAR(42) NOT NULL,
  pseudo        VARCHAR(42),
  mail          VARCHAR(42),
  motDePasse    VARCHAR(42),
  idRang        VARCHAR(42) NOT NULL
);

CREATE TABLE RELATION_VERIFIERLERANGPOURLESEVENEMENTS (
  PRIMARY KEY (idRang, idEvenement),
  idRang      VARCHAR(42) NOT NULL,
  idEvenement VARCHAR(42) NOT NULL
);

CREATE TABLE RELATION_VOIRINFO (
  PRIMARY KEY (idEvenement, idTypeEvenement),
  idEvenement     VARCHAR(42) NOT NULL,
  idTypeEvenement VARCHAR(42) NOT NULL
);

CREATE TABLE RELATION_VOIRLESPERSONNAGES (
  PRIMARY KEY (idPersonnage, idEvenement),
  idPersonnage VARCHAR(42) NOT NULL,
  idEvenement  VARCHAR(42) NOT NULL,
  niveau       VARCHAR(42)
);

CREATE TABLE ZONE (
  PRIMARY KEY (idZone),
  idZone     VARCHAR(42) NOT NULL,
  intitule   VARCHAR(42),
  rang       VARCHAR(42),
  idTypeZone VARCHAR(42) NOT NULL
);

ALTER TABLE API_KEY ADD FOREIGN KEY (idUtilisateur) REFERENCES UTILISATEUR (idUtilisateur);

ALTER TABLE RELATION_DEMANDER ADD FOREIGN KEY (idEvenement) REFERENCES EVENEMENT (idEvenement);
ALTER TABLE RELATION_DEMANDER ADD FOREIGN KEY (idPersonnage) REFERENCES PERSONNAGE (idPersonnage);

ALTER TABLE EVENEMENT ADD FOREIGN KEY (idPrerequis) REFERENCES PREREQUIS (idPrerequis);
ALTER TABLE EVENEMENT ADD FOREIGN KEY (idZone) REFERENCES ZONE (idZone);
ALTER TABLE EVENEMENT ADD FOREIGN KEY (idUtilisateur) REFERENCES UTILISATEUR (idUtilisateur);

ALTER TABLE RELATION_SIGNALE ADD FOREIGN KEY (idSignalement) REFERENCES SIGNALEMENT (idSignalement);
ALTER TABLE RELATION_SIGNALE ADD FOREIGN KEY (idUtilisateur) REFERENCES UTILISATEUR (idUtilisateur);
ALTER TABLE SIGNALEMENT ADD FOREIGN KEY (idUtilisateur) REFERENCES UTILISATEUR (idUtilisateur);
ALTER TABLE SIGNALEMENT ADD FOREIGN KEY (idTypeSignalement) REFERENCES TYPE_SIGNALEMENT (idTypeSignalement);

ALTER TABLE UTILISATEUR ADD FOREIGN KEY (idRang) REFERENCES RANG (idRang);

ALTER TABLE RELATION_VERIFIERLERANGPOURLESEVENEMENTS ADD FOREIGN KEY (idEvenement) REFERENCES EVENEMENT (idEvenement);
ALTER TABLE RELATION_VERIFIERLERANGPOURLESEVENEMENTS ADD FOREIGN KEY (idRang) REFERENCES RANG (idRang);

ALTER TABLE RELATION_VOIRINFO ADD FOREIGN KEY (idTypeEvenement) REFERENCES TYPE_EVENEMENT(idTypeEvenement);
ALTER TABLE RELATION_VOIRINFO ADD FOREIGN KEY (idEvenement) REFERENCES EVENEMENT (idEvenement);

ALTER TABLE RELATION_VOIRLESPERSONNAGES ADD FOREIGN KEY (idEvenement) REFERENCES EVENEMENT (idEvenement);
ALTER TABLE RELATION_VOIRLESPERSONNAGES ADD FOREIGN KEY (idPersonnage) REFERENCES PERSONNAGE (idPersonnage);

ALTER TABLE ZONE ADD FOREIGN KEY (idTypeZone) REFERENCES TYPE_ZONE (idTypeZone);
